// pages/api/transcript.js
import { getVideoTranscript } from '../../utils/youtube';

export default async function handler(req, res) {
  const { videoId } = req.query;

  if (!videoId) {
    return res.status(400).json({ 
      success: false, 
      error: 'Video ID is required' 
    });
  }

  try {
    console.log(`Getting transcript for video ID: ${videoId}`);
    
    // Construct YouTube URL from video ID
    const url = `https://www.youtube.com/watch?v=${videoId}`;
    
    // Get transcript using our improved YouTube utility
    const transcriptResult = await getVideoTranscript(url);
    
    if (!transcriptResult.success) {
      return res.status(404).json({
        success: false,
        error: transcriptResult.error || 'Failed to retrieve transcript',
        videoId
      });
    }

    // Clean the transcript
    let transcript = transcriptResult.transcript || '';
    transcript = cleanTranscript(transcript);
    
    // Validate the transcript
    if (!transcript || transcript.trim().length < 20) {
      return res.status(404).json({
        success: false,
        error: 'Retrieved transcript is empty or too short',
        videoId
      });
    }

    // Return the transcript data
    return res.status(200).json({
      success: true,
      videoId: transcriptResult.video_id,
      transcript: transcript,
      language: transcriptResult.language,
      method: transcriptResult.method,
      isAutoGenerated: transcriptResult.isAutoGenerated
    });
  } catch (error) {
    console.error('Error getting transcript:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Failed to get transcript: ' + error.message,
      videoId 
    });
  }
}

// Helper function to clean transcript text
function cleanTranscript(text) {
  if (!text) return '';
  
  // Decode HTML entities
  let cleaned = text.replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&amp;/g, '&')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'")
    .replace(/&#(\d+);/g, (_, dec) => String.fromCharCode(dec));
  
  // Remove excessive whitespace while preserving paragraph breaks
  cleaned = cleaned.replace(/\s+/g, ' '); // Replace multiple spaces with single space
  cleaned = cleaned.replace(/\n{3,}/g, '\n\n'); // Replace excessive newlines
  
  return cleaned.trim();
}